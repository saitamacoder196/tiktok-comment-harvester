import streamlit as st
import json
from pathlib import Path
import os
import shutil
from app.data.database import get_db_connector, setup_database
from app.config.database_config import get_database_config, save_database_config

def render_settings_page():
    """
    Hi·ªÉn th·ªã trang c√†i ƒë·∫∑t ·ª©ng d·ª•ng
    """
    st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
    config_dir = Path("app/config")
    config_dir.mkdir(parents=True, exist_ok=True)
    config_file = config_dir / "settings.json"
    
    # T·∫£i c·∫•u h√¨nh hi·ªán t·∫°i
    config = load_config(config_file)
    
    # Tab cho c√°c nh√≥m c√†i ƒë·∫∑t
    tab1, tab2, tab3, tab4 = st.tabs(["Crawler", "Giao di·ªán", "D·ªØ li·ªáu", "Database"])
    
    with tab1:
        st.subheader("C√†i ƒë·∫∑t Crawler")
        
        # C√†i ƒë·∫∑t chromedriver
        st.markdown("#### ChromeDriver")
        
        chromedriver_method = st.radio(
            "Ph∆∞∆°ng th·ª©c l·∫•y ChromeDriver",
            options=["T·ª± ƒë·ªông t·∫£i", "Th·ªß c√¥ng (ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n)"],
            index=0 if config.get("auto_chromedriver", True) else 1
        )
        
        config["auto_chromedriver"] = (chromedriver_method == "T·ª± ƒë·ªông t·∫£i")
        
        if not config["auto_chromedriver"]:
            config["chromedriver_path"] = st.text_input(
                "ƒê∆∞·ªùng d·∫´n ƒë·∫øn ChromeDriver",
                value=config.get("chromedriver_path", "")
            )
        
        # C√†i ƒë·∫∑t h√†nh vi
        st.markdown("#### H√†nh vi Crawler")
        
        col1, col2 = st.columns(2)
        
        with col1:
            config["default_headless"] = st.checkbox(
                "Ch·∫ø ƒë·ªô headless m·∫∑c ƒë·ªãnh",
                value=config.get("default_headless", False)
            )
            
            config["default_max_comments"] = st.number_input(
                "S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n m·∫∑c ƒë·ªãnh",
                min_value=10,
                max_value=10000,
                value=config.get("default_max_comments", 100),
                step=10
            )
        
        with col2:
            config["default_scroll_pause"] = st.slider(
                "Th·ªùi gian ch·ªù m·∫∑c ƒë·ªãnh (gi√¢y)",
                min_value=0.5,
                max_value=5.0,
                value=config.get("default_scroll_pause", 1.5),
                step=0.1
            )
            
            config["default_timeout"] = st.slider(
                "Timeout m·∫∑c ƒë·ªãnh (gi√¢y)",
                min_value=5,
                max_value=60,
                value=config.get("default_timeout", 10),
                step=1
            )
            
        # C√†i ƒë·∫∑t User-Agent
        st.markdown("#### User-Agent")
        
        use_custom_ua = st.checkbox(
            "S·ª≠ d·ª•ng User-Agent t√πy ch·ªânh",
            value=config.get("use_custom_ua", False)
        )
        
        config["use_custom_ua"] = use_custom_ua
        
        if use_custom_ua:
            config["custom_user_agent"] = st.text_input(
                "User-Agent t√πy ch·ªânh",
                value=config.get("custom_user_agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            )
    
    with tab2:
        st.subheader("C√†i ƒë·∫∑t giao di·ªán")
        
        # C√†i ƒë·∫∑t theme
        st.markdown("#### Theme")
        
        theme = st.selectbox(
            "Theme",
            options=["Light", "Dark", "Auto"],
            index=["Light", "Dark", "Auto"].index(config.get("theme", "Light"))
        )
        
        config["theme"] = theme
        
        # C√†i ƒë·∫∑t ng√¥n ng·ªØ
        st.markdown("#### Ng√¥n ng·ªØ")
        
        language = st.selectbox(
            "Ng√¥n ng·ªØ",
            options=["Ti·∫øng Vi·ªát", "English"],
            index=["Ti·∫øng Vi·ªát", "English"].index(config.get("language", "Ti·∫øng Vi·ªát"))
        )
        
        config["language"] = language
        
        st.info("M·ªôt s·ªë c√†i ƒë·∫∑t giao di·ªán c√≥ th·ªÉ c·∫ßn kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ c√≥ hi·ªáu l·ª±c.")
    
    with tab3:
        st.subheader("C√†i ƒë·∫∑t d·ªØ li·ªáu")
        
        # ƒê·ªãnh d·∫°ng xu·∫•t m·∫∑c ƒë·ªãnh
        st.markdown("#### ƒê·ªãnh d·∫°ng xu·∫•t")
        
        default_export_format = st.selectbox(
            "ƒê·ªãnh d·∫°ng xu·∫•t m·∫∑c ƒë·ªãnh",
            options=["CSV", "JSON", "Excel"],
            index=["CSV", "JSON", "Excel"].index(config.get("default_export_format", "CSV"))
        )
        
        config["default_export_format"] = default_export_format
        
        # C√†i ƒë·∫∑t l∆∞u tr·ªØ
        st.markdown("#### L∆∞u tr·ªØ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            config["auto_clean_data"] = st.checkbox(
                "T·ª± ƒë·ªông l√†m s·∫°ch d·ªØ li·ªáu c≈©",
                value=config.get("auto_clean_data", False)
            )
            
        with col2:
            if config["auto_clean_data"]:
                config["clean_days"] = st.number_input(
                    "X√≥a d·ªØ li·ªáu c≈© h∆°n (ng√†y)",
                    min_value=1,
                    max_value=365,
                    value=config.get("clean_days", 30),
                    step=1
                )
        
        # N√∫t x√≥a d·ªØ li·ªáu
        st.markdown("#### Qu·∫£n l√Ω d·ªØ li·ªáu")
        
        if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£ d·ªØ li·ªáu", type="primary", use_container_width=False):
            confirm = st.checkbox("T√¥i hi·ªÉu r·∫±ng h√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu")
            
            if confirm:
                try:
                    # X√≥a th∆∞ m·ª•c data
                    data_dir = Path("data")
                    if data_dir.exists():
                        for item in data_dir.glob("**/*"):
                            if item.is_file():
                                item.unlink()
                        
                        st.success("ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng!")
                    else:
                        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x√≥a.")
                except Exception as e:
                    st.error(f"L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
    
    with tab4:
        st.subheader("C√†i ƒë·∫∑t Database")
        
        # L·∫•y c·∫•u h√¨nh database
        db_config = get_database_config()
        
        # C√†i ƒë·∫∑t k·∫øt n·ªëi
        st.markdown("#### K·∫øt n·ªëi PostgreSQL")
        
        # B·∫≠t/t·∫Øt t√≠nh nƒÉng database
        db_enabled = st.checkbox(
            "K√≠ch ho·∫°t t√≠nh nƒÉng database",
            value=db_config.get("db_enabled", False),
            help="B·∫≠t t√≠nh nƒÉng n√†y ƒë·ªÉ l∆∞u d·ªØ li·ªáu v√†o PostgreSQL database"
        )
        
        config["db_enabled"] = db_enabled
        
        if db_enabled:
            col1, col2 = st.columns(2)
            
            with col1:
                # Host
                db_host = st.text_input(
                    "Host",
                    value=db_config.get("db_host", "localhost"),
                    help="ƒê·ªãa ch·ªâ m√°y ch·ªß PostgreSQL"
                )
                
                # User
                db_user = st.text_input(
                    "T√™n ng∆∞·ªùi d√πng",
                    value=db_config.get("db_user", "postgres"),
                    help="T√™n ng∆∞·ªùi d√πng PostgreSQL"
                )
                
                # Database name
                db_name = st.text_input(
                    "T√™n database",
                    value=db_config.get("db_name", "tiktok_data"),
                    help="T√™n database s·∫Ω ƒë∆∞·ª£c t·∫°o ho·∫∑c k·∫øt n·ªëi"
                )
            
            with col2:
                # Port
                db_port = st.number_input(
                    "Port",
                    value=int(db_config.get("db_port", 5432)),
                    min_value=1,
                    max_value=65535,
                    help="C·ªïng k·∫øt n·ªëi PostgreSQL"
                )
                
                # Password
                db_password = st.text_input(
                    "M·∫≠t kh·∫©u",
                    value=db_config.get("db_password", ""),
                    type="password",
                    help="M·∫≠t kh·∫©u PostgreSQL"
                )
                
                # Auto save to DB
                auto_save_to_db = st.checkbox(
                    "T·ª± ƒë·ªông l∆∞u v√†o database",
                    value=db_config.get("auto_save_to_db", False),
                    help="T·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu v√†o database sau khi thu th·∫≠p"
                )
            
            # C·∫≠p nh·∫≠t c·∫•u h√¨nh
            config["db_host"] = db_host
            config["db_port"] = db_port
            config["db_user"] = db_user
            config["db_password"] = db_password
            config["db_name"] = db_name
            config["auto_save_to_db"] = auto_save_to_db
            
            # N√∫t test k·∫øt n·ªëi
            if st.button("üîå Ki·ªÉm tra k·∫øt n·ªëi", use_container_width=False):
                with st.spinner("ƒêang ki·ªÉm tra k·∫øt n·ªëi..."):
                    # L·∫•y k·∫øt n·ªëi DB
                    db = get_db_connector({
                        "db_host": db_host,
                        "db_port": db_port,
                        "db_user": db_user,
                        "db_password": db_password,
                        "db_name": db_name
                    })
                    
                    # Th·ª≠ k·∫øt n·ªëi
                    if db.connect():
                        st.success("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn PostgreSQL server!")
                        db.close()
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn PostgreSQL server!")
            
            # N√∫t thi·∫øt l·∫≠p database
            if st.button("üõ†Ô∏è Thi·∫øt l·∫≠p database", use_container_width=False):
                with st.spinner("ƒêang thi·∫øt l·∫≠p database..."):
                    # Thi·∫øt l·∫≠p database
                    if setup_database({
                        "db_host": db_host,
                        "db_port": db_port,
                        "db_user": db_user,
                        "db_password": db_password,
                        "db_name": db_name
                    }):
                        st.success("‚úÖ ƒê√£ thi·∫øt l·∫≠p database th√†nh c√¥ng!")
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ thi·∫øt l·∫≠p database!")
                        
            # Th√¥ng tin
            st.info("""
            **L∆∞u √Ω v·ªÅ PostgreSQL:**
            - ƒê·∫£m b·∫£o PostgreSQL ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ƒëang ch·∫°y
            - Ng∆∞·ªùi d√πng ph·∫£i c√≥ quy·ªÅn t·∫°o database v√† b·∫£ng
            - D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o database n·∫øu "T·ª± ƒë·ªông l∆∞u v√†o database" ƒë∆∞·ª£c b·∫≠t
            - B·∫°n c√≥ th·ªÉ xu·∫•t d·ªØ li·ªáu v√†o database t·ª´ trang Data View
            """)
        
        # N·∫øu t√≠nh nƒÉng b·ªã t·∫Øt, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t PostgreSQL
        else:
            st.info("""
            ### C√†i ƒë·∫∑t PostgreSQL
            ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng database, b·∫°n c·∫ßn c√†i ƒë·∫∑t PostgreSQL:
            
            1. T·∫£i v√† c√†i ƒë·∫∑t PostgreSQL t·ª´ [postgresql.org](https://www.postgresql.org/download/)
            2. T·∫°o ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u trong qu√° tr√¨nh c√†i ƒë·∫∑t
            3. ƒê·∫£m b·∫£o d·ªãch v·ª• PostgreSQL ƒëang ch·∫°y
            4. B·∫≠t t√≠nh nƒÉng database ·ªü tr√™n v√† nh·∫≠p th√¥ng tin k·∫øt n·ªëi
            5. Ki·ªÉm tra k·∫øt n·ªëi v√† thi·∫øt l·∫≠p database
            """)
    
    # L∆∞u c·∫•u h√¨nh
    if st.button("üíæ L∆∞u c√†i ƒë·∫∑t", type="primary"):
        save_config(config, config_file)
        save_database_config(config)
        st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!")
        
    # Kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh
    if st.button("üîÑ Kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh"):
        default_config = get_default_config()
        save_config(default_config, config_file)
        st.success("ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh!")
        st.info("Vui l√≤ng l√†m m·ªõi trang ƒë·ªÉ √°p d·ª•ng c√†i ƒë·∫∑t m·ªõi.")

def load_config(config_file):
    """
    T·∫£i c·∫•u h√¨nh t·ª´ file
    
    Args:
        config_file (Path): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        
    Returns:
        dict: C·∫•u h√¨nh ƒë√£ t·∫£i
    """
    if config_file.exists():
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return get_default_config()
    else:
        return get_default_config()

def save_config(config, config_file):
    """
    L∆∞u c·∫•u h√¨nh v√†o file
    
    Args:
        config (dict): C·∫•u h√¨nh c·∫ßn l∆∞u
        config_file (Path): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
    """
    config_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

def get_default_config():
    """
    Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    
    Returns:
        dict: C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    """
    return {
        "auto_chromedriver": True,
        "chromedriver_path": "",
        "default_headless": False,
        "default_max_comments": 100,
        "default_scroll_pause": 1.5,
        "default_timeout": 10,
        "use_custom_ua": False,
        "custom_user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "theme": "Light",
        "language": "Ti·∫øng Vi·ªát",
        "default_export_format": "CSV",
        "auto_clean_data": False,
        "clean_days": 30,
        "db_enabled": False,
        "db_host": "localhost",
        "db_port": 5432,
        "db_user": "postgres",
        "db_password": "",
        "db_name": "tiktok_data",
        "auto_save_to_db": False
    }