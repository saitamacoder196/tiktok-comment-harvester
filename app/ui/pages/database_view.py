import streamlit as st
import pandas as pd
import plotly.express as px
from pathlib import Path
import time
from app.data.database import get_db_connector
from app.config.database_config import get_database_config

def render_database_view_page():
    """
    Hi·ªÉn th·ªã trang xem v√† qu·∫£n l√Ω d·ªØ li·ªáu PostgreSQL
    """
    st.header("üêò PostgreSQL Database")
    
    # Ki·ªÉm tra xem t√≠nh nƒÉng database c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
    db_config = get_database_config()
    
    if not db_config.get("db_enabled", False):
        st.warning("T√≠nh nƒÉng database ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng k√≠ch ho·∫°t trong trang C√†i ƒë·∫∑t.")
        
        with st.expander("H∆∞·ªõng d·∫´n k√≠ch ho·∫°t PostgreSQL", expanded=True):
            st.markdown("""
            ### K√≠ch ho·∫°t t√≠nh nƒÉng PostgreSQL:
            
            1. C√†i ƒë·∫∑t PostgreSQL n·∫øu b·∫°n ch∆∞a c√†i ƒë·∫∑t
            2. ƒêi ƒë·∫øn trang **C√†i ƒë·∫∑t** > tab **Database**
            3. Ch·ªçn "K√≠ch ho·∫°t t√≠nh nƒÉng database"
            4. Nh·∫≠p th√¥ng tin k·∫øt n·ªëi PostgreSQL
            5. B·∫•m "Ki·ªÉm tra k·∫øt n·ªëi" ƒë·ªÉ x√°c nh·∫≠n k·∫øt n·ªëi ho·∫°t ƒë·ªông
            6. B·∫•m "Thi·∫øt l·∫≠p database" ƒë·ªÉ t·∫°o database v√† c√°c b·∫£ng c·∫ßn thi·∫øt
            7. L∆∞u c√†i ƒë·∫∑t
            """)
        
        if st.button("ƒêi ƒë·∫øn trang C√†i ƒë·∫∑t"):
            st.session_state['page'] = 'Settings'
            st.rerun()
            
        return
    
    # K·∫øt n·ªëi ƒë·∫øn database
    db = get_db_connector(db_config)
    
    try:
        if not db.connect_to_database():
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn PostgreSQL database. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t.")
            
            if st.button("ƒêi ƒë·∫øn trang C√†i ƒë·∫∑t"):
                st.session_state['page'] = 'Settings'
                st.rerun()
                
            return
        
        # L·∫•y th·ªëng k√™ t·ª´ database
        stats = db.get_database_stats()
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        st.subheader("üìä Th·ªëng k√™ Database")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("S·ªë l∆∞·ª£ng video", stats.get('videos_count', 0))
        
        with col2:
            st.metric("S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n", stats.get('comments_count', 0))
        
        with col3:
            st.metric("S·ªë ng∆∞·ªùi d√πng", stats.get('unique_users', 0))
        
        # Hi·ªÉn th·ªã th√¥ng tin video c√≥ nhi·ªÅu b√¨nh lu·∫≠n nh·∫•t
        if 'most_commented_video' in stats and stats['most_commented_video']:
            st.subheader("Video c√≥ nhi·ªÅu b√¨nh lu·∫≠n nh·∫•t")
            most_commented = stats['most_commented_video']
            st.markdown(f"""
            **Video ID:** {most_commented['video_id']}  
            **URL:** [{most_commented['video_url']}]({most_commented['video_url']})  
            **S·ªë b√¨nh lu·∫≠n:** {most_commented['comment_count']}
            """)
        
        # Hi·ªÉn th·ªã top ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t
        if 'top_users' in stats and stats['top_users']:
            st.subheader("Top ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t")
            
            # T·∫°o DataFrame t·ª´ top_users
            top_users_df = pd.DataFrame(stats['top_users'])
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            fig = px.bar(
                top_users_df, 
                x='username', 
                y='comment_count',
                labels={'username': 'Ng∆∞·ªùi d√πng', 'comment_count': 'S·ªë b√¨nh lu·∫≠n'},
                title="Top ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t"
            )
            st.plotly_chart(fig)
        
        # Th√™m tabs ƒë·ªÉ xem d·ªØ li·ªáu c·ª• th·ªÉ
        tab1, tab2 = st.tabs(["B√¨nh lu·∫≠n", "Videos"])
        
        with tab1:
            st.subheader("D·ªØ li·ªáu b√¨nh lu·∫≠n")
            
            # B·ªô l·ªçc
            col1, col2, col3 = st.columns(3)
            
            with col1:
                search_username = st.text_input("T√¨m ki·∫øm theo username")
            
            with col2:
                # L·∫•y danh s√°ch video_id t·ª´ database
                db.cursor.execute("SELECT video_id FROM videos")
                video_ids = [row[0] for row in db.cursor.fetchall()]
                
                # Dropdown ch·ªçn video_id
                filter_video_id = st.selectbox(
                    "L·ªçc theo video ID",
                    options=["T·∫•t c·∫£"] + video_ids,
                    index=0
                )
                
                # Chuy·ªÉn ƒë·ªïi selection th√†nh gi√° tr·ªã filter
                selected_video_id = None if filter_video_id == "T·∫•t c·∫£" else filter_video_id
            
            with col3:
                # S·ªë l∆∞·ª£ng k·∫øt qu·∫£ hi·ªÉn th·ªã
                limit = st.number_input("S·ªë l∆∞·ª£ng k·∫øt qu·∫£", min_value=10, max_value=1000, value=100, step=10)
            
            # N√∫t t√¨m ki·∫øm
            search_button = st.button("üîç T√¨m ki·∫øm", use_container_width=False)
            
            if search_button or 'last_comment_search' in st.session_state:
                # L∆∞u tr·∫°ng th√°i t√¨m ki·∫øm
                if search_button:
                    st.session_state['last_comment_search'] = {
                        'username': search_username,
                        'video_id': selected_video_id,
                        'limit': limit
                    }
                
                # L·∫•y tham s·ªë t·ª´ session state n·∫øu c·∫ßn
                search_params = st.session_state.get('last_comment_search', {})
                username = search_params.get('username', search_username)
                video_id = search_params.get('video_id', selected_video_id)
                query_limit = search_params.get('limit', limit)
                
                # Truy v·∫•n b√¨nh lu·∫≠n
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
                    comments = db.query_comments(
                        video_id=video_id,
                        username=username,
                        limit=query_limit
                    )
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                if comments:
                    # Chuy·ªÉn ƒë·ªïi sang DataFrame
                    comments_df = pd.DataFrame(comments)
                    
                    # ƒê·ªãnh d·∫°ng th·ªùi gian
                    if 'crawled_at' in comments_df.columns:
                        comments_df['crawled_at'] = pd.to_datetime(comments_df['crawled_at'])
                    
                    # Hi·ªÉn th·ªã DataFrame
                    st.dataframe(comments_df)
                    
                    # T√πy ch·ªçn xu·∫•t d·ªØ li·ªáu
                    if st.button("üì• Xu·∫•t k·∫øt qu·∫£ t√¨m ki·∫øm"):
                        export_format = st.radio(
                            "Ch·ªçn ƒë·ªãnh d·∫°ng xu·∫•t:",
                            options=["CSV", "Excel", "JSON"]
                        )
                        
                        # T·∫°o th∆∞ m·ª•c export n·∫øu ch∆∞a t·ªìn t·∫°i
                        export_dir = Path("data/exports")
                        export_dir.mkdir(parents=True, exist_ok=True)
                        
                        # T√™n file xu·∫•t
                        timestamp = time.strftime("%Y%m%d_%H%M%S")
                        
                        if export_format == "CSV":
                            export_path = export_dir / f"comments_export_{timestamp}.csv"
                            if export_to_csv(comments_df, export_path):
                                st.success(f"ƒê√£ xu·∫•t d·ªØ li·ªáu sang: {export_path}")
                        elif export_format == "Excel":
                            from app.data.exporter import export_to_excel
                            export_path = export_dir / f"comments_export_{timestamp}.xlsx"
                            if export_to_excel(comments_df, export_path):
                                st.success(f"ƒê√£ xu·∫•t d·ªØ li·ªáu sang: {export_path}")
                        else:  # JSON
                            from app.data.exporter import export_to_json
                            export_path = export_dir / f"comments_export_{timestamp}.json"
                            if export_to_json(comments_df, export_path):
                                st.success(f"ƒê√£ xu·∫•t d·ªØ li·ªáu sang: {export_path}")
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n n√†o th·ªèa m√£n ƒëi·ªÅu ki·ªán t√¨m ki·∫øm.")
        
        with tab2:
            st.subheader("D·ªØ li·ªáu video")
            
            # Truy v·∫•n danh s√°ch video
            db.cursor.execute("""
            SELECT v.video_id, v.video_url, v.author, COUNT(c.comment_id) as comment_count, v.crawled_at
            FROM videos v
            LEFT JOIN comments c ON v.video_id = c.video_id
            GROUP BY v.video_id, v.video_url, v.author, v.crawled_at
            ORDER BY v.crawled_at DESC
            """)
            
            # L·∫•y k·∫øt qu·∫£ v√† t√™n c·ªôt
            columns = [desc[0] for desc in db.cursor.description]
            videos = [dict(zip(columns, row)) for row in db.cursor.fetchall()]
            
            if videos:
                # Chuy·ªÉn ƒë·ªïi sang DataFrame
                videos_df = pd.DataFrame(videos)
                
                # ƒê·ªãnh d·∫°ng th·ªùi gian
                if 'crawled_at' in videos_df.columns:
                    videos_df['crawled_at'] = pd.to_datetime(videos_df['crawled_at'])
                
                # Hi·ªÉn th·ªã DataFrame
                st.dataframe(videos_df)
                
                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt khi ch·ªçn video
                st.subheader("Th√¥ng tin chi ti·∫øt video")
                selected_video_id = st.selectbox(
                    "Ch·ªçn video ƒë·ªÉ xem chi ti·∫øt",
                    options=[v['video_id'] for v in videos]
                )
                
                if selected_video_id:
                    # L·∫•y th√¥ng tin video
                    selected_video = next((v for v in videos if v['video_id'] == selected_video_id), None)
                    
                    if selected_video:
                        st.markdown(f"""
                        **Video ID:** {selected_video['video_id']}  
                        **URL:** [{selected_video['video_url']}]({selected_video['video_url']})  
                        **T√°c gi·∫£:** {selected_video['author'] or 'Kh√¥ng x√°c ƒë·ªãnh'}  
                        **S·ªë b√¨nh lu·∫≠n:** {selected_video['comment_count']}  
                        **Th·ªùi gian thu th·∫≠p:** {selected_video['crawled_at']}
                        """)
                        
                        # N√∫t xem b√¨nh lu·∫≠n
                        if st.button("Xem b√¨nh lu·∫≠n c·ªßa video n√†y"):
                            st.session_state['last_comment_search'] = {
                                'username': '',
                                'video_id': selected_video_id,
                                'limit': 100
                            }
                            st.rerun()
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu video n√†o trong database.")
        
        # Th√™m t√≠nh nƒÉng qu·∫£n l√Ω database
        st.markdown("---")
        st.subheader("‚öôÔ∏è Qu·∫£n l√Ω Database")
        
        with st.expander("T√πy ch·ªçn n√¢ng cao"):
            st.warning("C√°c thao t√°c d∆∞·ªõi ƒë√¢y c√≥ th·ªÉ x√≥a d·ªØ li·ªáu vƒ©nh vi·ªÖn. H√£y c·∫©n th·∫≠n!")
            
            # N√∫t x√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n
            if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n", use_container_width=False):
                confirm = st.checkbox("T√¥i hi·ªÉu r·∫±ng h√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† mu·ªën x√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n")
                
                if confirm:
                    try:
                        db.cursor.execute("DELETE FROM comments")
                        st.success("ƒê√£ x√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n!")
                    except Exception as e:
                        st.error(f"L·ªói khi x√≥a b√¨nh lu·∫≠n: {str(e)}")
            
            # N√∫t x√≥a to√†n b·ªô d·ªØ li·ªáu
            if st.button("‚ö†Ô∏è X√≥a to√†n b·ªô d·ªØ li·ªáu", use_container_width=False):
                confirm = st.checkbox("T√¥i hi·ªÉu r·∫±ng h√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu", key="confirm_delete_all")
                
                if confirm:
                    try:
                        # X√≥a comments tr∆∞·ªõc v√¨ c√≥ foreign key
                        db.cursor.execute("DELETE FROM comments")
                        db.cursor.execute("DELETE FROM videos")
                        st.success("ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu!")
                    except Exception as e:
                        st.error(f"L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
            
            # N√∫t thi·∫øt l·∫≠p l·∫°i database
            if st.button("üîÑ Thi·∫øt l·∫≠p l·∫°i database", use_container_width=False):
                confirm = st.checkbox("T√¥i hi·ªÉu r·∫±ng h√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† mu·ªën thi·∫øt l·∫≠p l·∫°i database", key="confirm_reset_db")
                
                if confirm:
                    try:
                        # X√≥a c√°c b·∫£ng c≈©
                        db.cursor.execute("DROP TABLE IF EXISTS comments")
                        db.cursor.execute("DROP TABLE IF EXISTS videos")
                        
                        # T·∫°o l·∫°i c√°c b·∫£ng
                        if db.create_tables():
                            st.success("ƒê√£ thi·∫øt l·∫≠p l·∫°i database th√†nh c√¥ng!")
                        else:
                            st.error("L·ªói khi thi·∫øt l·∫≠p l·∫°i database.")
                    except Exception as e:
                        st.error(f"L·ªói khi thi·∫øt l·∫≠p l·∫°i database: {str(e)}")
    
    except Exception as e:
        st.error(f"L·ªói khi t∆∞∆°ng t√°c v·ªõi database: {str(e)}")
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi database
        db.close()