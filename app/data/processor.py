import pandas as pd
import numpy as np
from typing import Dict, Any
import re
from app.utils.helpers import format_number

def clean_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    L√†m s·∫°ch d·ªØ li·ªáu b√¨nh lu·∫≠n
    
    Args:
        df (DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√¨nh lu·∫≠n
        
    Returns:
        DataFrame: DataFrame ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
    """
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
    df_clean = df.copy()
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt likes v√† replies_count t·ª´ chu·ªói sang s·ªë
    if 'likes' in df_clean.columns:
        df_clean['likes_count'] = df_clean['likes'].apply(format_number)
    
    if 'replies_count' in df_clean.columns:
        df_clean['replies_number'] = df_clean['replies_count'].apply(format_number)
    
    # T√≠nh ƒë·ªô d√†i comment
    if 'comment_text' in df_clean.columns:
        df_clean['comment_length'] = df_clean['comment_text'].apply(lambda x: len(str(x)))
    
    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a trong username
    if 'username' in df_clean.columns:
        df_clean['username'] = df_clean['username'].apply(lambda x: str(x).strip())
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt th·ªùi gian
    if 'comment_time' in df_clean.columns:
        df_clean['comment_time'] = df_clean['comment_time'].apply(lambda x: str(x).strip())
    
    return df_clean

def basic_analysis(df: pd.DataFrame) -> Dict[str, Any]:
    """
    Ph√¢n t√≠ch c∆° b·∫£n d·ªØ li·ªáu b√¨nh lu·∫≠n
    
    Args:
        df (DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√¨nh lu·∫≠n
        
    Returns:
        dict: K·∫øt qu·∫£ ph√¢n t√≠ch
    """
    # L√†m s·∫°ch d·ªØ li·ªáu
    df_clean = clean_data(df)
    
    # K·∫øt qu·∫£ ph√¢n t√≠ch
    results = {}
    
    # S·ªë ng∆∞·ªùi d√πng duy nh·∫•t
    results['unique_users'] = df_clean['username'].nunique()
    
    # ƒê·ªô d√†i b√¨nh lu·∫≠n trung b√¨nh
    results['avg_comment_length'] = df_clean['comment_length'].mean()
    
    # L∆∞·ª£t th√≠ch trung b√¨nh
    if 'likes_count' in df_clean.columns:
        results['avg_likes'] = df_clean['likes_count'].mean()
    else:
        results['avg_likes'] = 0
    
    # Ph√¢n ph·ªëi ƒë·ªô d√†i b√¨nh lu·∫≠n
    comment_length_bins = [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]
    hist, bin_edges = np.histogram(df_clean['comment_length'], bins=comment_length_bins)
    
    # T·∫°o DataFrame cho ph√¢n ph·ªëi ƒë·ªô d√†i
    bin_labels = [f"{bin_edges[i]}-{bin_edges[i+1]}" for i in range(len(bin_edges)-1)]
    results['comment_length_dist'] = pd.DataFrame({
        'ƒê·ªô d√†i': bin_labels,
        'S·ªë l∆∞·ª£ng': hist
    }).set_index('ƒê·ªô d√†i')
    
    # Top ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t
    top_users = df_clean['username'].value_counts().reset_index()
    top_users.columns = ['Ng∆∞·ªùi d√πng', 'S·ªë b√¨nh lu·∫≠n']
    results['top_users'] = top_users.set_index('Ng∆∞·ªùi d√πng').head(10)
    
    return results

def sentiment_analysis(df: pd.DataFrame) -> pd.DataFrame:
    """
    Ph√¢n t√≠ch c·∫£m x√∫c c∆° b·∫£n d·ª±a tr√™n t·ª´ kh√≥a
    
    Args:
        df (DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√¨nh lu·∫≠n
        
    Returns:
        DataFrame: DataFrame ƒë√£ th√™m c·ªôt sentiment
    """
    # L√†m s·∫°ch d·ªØ li·ªáu
    df_clean = clean_data(df)
    
    # T·ª´ ƒëi·ªÉn t·ª´ kh√≥a t√≠ch c·ª±c v√† ti√™u c·ª±c ƒë∆°n gi·∫£n (c√≥ th·ªÉ m·ªü r·ªông)
    positive_keywords = [
        'hay', 't·ªët', 'ƒë·∫πp', 'th√≠ch', 'y√™u', 'tuy·ªát v·ªùi', 'xu·∫•t s·∫Øc', 'tuy·ªát', 
        'gi·ªèi', 'th√∫ v·ªã', '·ªßng h·ªô', 't√†i nƒÉng', 'ƒë·ªânh', 'ch·∫•t', 'vip', 'pro',
        'hahaha', 'hihi', 'xinh', 'd·ªÖ th∆∞∆°ng', 'ƒë√°ng y√™u', 'cool', 'th√≠ch th√∫',
        '‚ù§Ô∏è', 'üòç', 'üëç', 'üëè', 'üî•', 'üíØ', 'üëå', 'üòä'
    ]
    
    negative_keywords = [
        't·ªá', 'k√©m', 'd·ªü', 'gh√©t', 'ch√°n', 'bu·ªìn', 'th·∫•t v·ªçng', 'kh√¥ng th√≠ch',
        't√†o lao', 'v√¥ duy√™n', 'nh·∫£m', 'x·∫•u', 'd·ªü t·ªá', 'ph√≠', 'd·ª°', 'l·ª´a ƒë·∫£o',
        'scam', 'c√πi', 'g√†', 'd·ªü h∆°i', 'ph√®n', 'cay', 'toxic',
        'üëé', 'üòí', 'üò°', 'ü§Æ', 'üí©', 'üò§', 'ü§¨'
    ]
    
    # Function ƒë·ªÉ x√°c ƒë·ªãnh c·∫£m x√∫c
    def determine_sentiment(text):
        if not isinstance(text, str):
            return 'neutral'
            
        text = text.lower()
        pos_count = sum(1 for keyword in positive_keywords if keyword.lower() in text)
        neg_count = sum(1 for keyword in negative_keywords if keyword.lower() in text)
        
        if pos_count > neg_count:
            return 'positive'
        elif neg_count > pos_count:
            return 'negative'
        else:
            return 'neutral'
    
    # Th√™m c·ªôt c·∫£m x√∫c
    df_clean['sentiment'] = df_clean['comment_text'].apply(determine_sentiment)
    
    return df_clean

def extract_hashtags(df: pd.DataFrame) -> pd.DataFrame:
    """
    Tr√≠ch xu·∫•t hashtags t·ª´ b√¨nh lu·∫≠n
    
    Args:
        df (DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√¨nh lu·∫≠n
        
    Returns:
        DataFrame: DataFrame ƒë√£ th√™m c·ªôt hashtags
    """
    # L√†m s·∫°ch d·ªØ li·ªáu
    df_clean = clean_data(df)
    
    # Function ƒë·ªÉ tr√≠ch xu·∫•t hashtags
    def extract_tags(text):
        if not isinstance(text, str):
            return []
            
        # T√¨m c√°c hashtag v·ªõi regex
        hashtags = re.findall(r'#(\w+)', text)
        return hashtags
    
    # Th√™m c·ªôt hashtags
    df_clean['hashtags'] = df_clean['comment_text'].apply(extract_tags)
    
    return df_clean

def get_popular_hashtags(df: pd.DataFrame, top_n: int = 10) -> pd.Series:
    """
    L·∫•y c√°c hashtag ph·ªï bi·∫øn nh·∫•t
    
    Args:
        df (DataFrame): DataFrame ƒë√£ c√≥ c·ªôt hashtags
        top_n (int): S·ªë l∆∞·ª£ng hashtag c·∫ßn tr·∫£ v·ªÅ
        
    Returns:
        Series: Series ch·ª©a s·ªë l∆∞·ª£ng c√°c hashtag ph·ªï bi·∫øn nh·∫•t
    """
    # Ki·ªÉm tra n·∫øu c·ªôt hashtags ch∆∞a t·ªìn t·∫°i
    if 'hashtags' not in df.columns:
        df = extract_hashtags(df)
    
    # L√†m ph·∫≥ng danh s√°ch hashtags
    all_hashtags = [tag for tags in df['hashtags'] for tag in tags]
    
    # ƒê·∫øm t·∫ßn su·∫•t
    hashtag_counts = pd.Series(all_hashtags).value_counts().head(top_n)
    
    return hashtag_counts